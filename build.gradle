import java.text.SimpleDateFormat

buildscript {
    repositories {
        maven {
            name = 'Minecraft Forge Maven'
            url = 'https://maven.minecraftforge.net'
        }
        maven {
            name = 'Gradle Plugin Central'
            url = 'https://plugins.gradle.org/m2/'
        }
        maven {
            name = 'SpongePowered Maven'
            url = 'https://repo.spongepowered.org/repository/maven-public'
        }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
        classpath group: 'net.darkhax.curseforgegradle', name: 'CurseForgeGradle', version: '1.0.10'
        classpath group: 'net.darkhax.tweedle', name: 'Tweedle', version: '1.0.5'
    }
}

plugins {
    id 'org.cadixdev.licenser' version '0.6.1'
}

apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'
java.toolchain.languageVersion = JavaLanguageVersion.of(17)
java.withSourcesJar()
java.withJavadocJar()

// Disables Gradle's custom module metadata from being published to maven. The
// metadata includes mapped dependencies which are not reasonably consumable by
// other mod developers.
tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

archivesBaseName = "${mod_name}-Forge-${minecraft_version}"

minecraft {
    mappings channel: 'official', version: minecraft_version

    if (project.hasProperty('forge_ats_enabled') && project.findProperty('forge_ats_enabled').toBoolean()) {
        // This location is hardcoded in Forge and can not be changed.
        // https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
        project.logger.debug('Forge Access Transformers are enabled for this project.')
    }

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            if (project.hasProperty('mixin_enable')) {
                arg "-mixin.config=${mod_id}.mixins.json"
                property 'mixin.env.remapRefMap', 'true'
                property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            }
            mods {
                modClientRun {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            if (project.hasProperty('mixin_enable')) {
                arg "-mixin.config=${mod_id}.mixins.json"
                property 'mixin.env.remapRefMap', 'true'
                property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            }
            mods {
                modServerRun {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
            if (project.hasProperty('mixin_enable')) {
                arg "-mixin.config=${mod_id}.mixins.json"
                property 'mixin.env.remapRefMap', 'true'
                property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            }
            mods {
                modDataRun {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

// Enable Mixins
if (project.hasProperty('mixin_enable')) {
    project.ext.mixin_enabled = project.file("src/main/resources/${mod_id}.mixins.json").exists()
    project.logger.lifecycle("Mixin ${project.ext.mixin_enabled ? 'enabled' : 'disabled'} for project ${project.name}.")
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    implementation fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

processResources {
    def buildProps = project.properties.clone()

    // Replaces FML's magic file.jarVersion string with the correct version at
    // build time.
    buildProps.put('file', [jarVersion: project.version])

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand buildProps
    }

    if (project.hasProperty('mixin_enable')) {
        filesMatching(["${mod_id}.mixins.json".toString()]) {
            expand buildProps
        }
    }
}

jar.finalizedBy('reobfJar')

if (project.hasProperty('mixin_enable')) {
    apply plugin: 'org.spongepowered.mixin'
    mixin {
        // Tells the mixin plugin where to put the generated refmap file.
        add sourceSets.main, "${mod_id}.refmap.json"
    }
}

jar {
    manifest {
        if (project.hasProperty('mixin_enable')) {
            attributes('MixinConfigs' : "${mod_id}.mixins.json")
        }
        attributes([
                'Specification-Title'     : mod_name,
                'Specification-Vendor'    : mod_author,
                'Specification-Version'   : project.jar.archiveVersion,
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_author,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Timestampe'              : System.currentTimeMillis(),
                'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'Build-On-Minecraft'      : minecraft_version
        ])
    }
}

repositories {
    mavenCentral()
    maven {
        name = 'Sponge / Mixin'
        url = 'https://repo.spongepowered.org/repository/maven-public/'
    }
    maven {
        name = 'Mod Menu'
        url = 'https://maven.terraformersmc.com/releases/'
    }
    maven {
        name = 'Progwm16 / JEI'
        url = 'https://dvs1.progwml6.com/files/maven'
    }
    maven {
        name = 'Shedaniel / REI'
        url = 'https://maven.shedaniel.me'
    }
}


tasks.withType(JavaCompile).configureEach {
    it.options.encoding = 'UTF-8'
    it.options.release = 17
}

// Disables Gradle's custom module metadata from being published to maven. The
// metadata includes mapped dependencies which are not reasonably consumable by
// other mod developers.
tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

license {
    header = project.file('LicenseHeader.md')
    include '**/*.java'
    include '**/*.kt'
    exclude '**/package-info.java'
    exclude '**/module-info.java'
    newLine = false
    properties {
        year = currentCopyrightYear()
        source = project.mod_source
        name = project.mod_name
    }
}

static def currentCopyrightYear() {
    def dateFormat = new SimpleDateFormat('yyyy')
    dateFormat.setTimeZone(TimeZone.getTimeZone('UTC'))
    return dateFormat.format(new Date())
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}
